/* xp_dlg.h */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

/* Copyright (C) 1992-1998 Colton Software Limited
 * Copyright (C) 1998-2015 R W Colton */

/* dialog manager header */

/* SKS March 1992 */

#ifndef __xp_dlg_h
#define __xp_dlg_h

#include "cmodules/resource.h"

/*
error numbers
*/

#define DIALOG_ERR_BASE (STATUS_ERR_INCREMENT * OBJECT_ID_DIALOG)

#define DIALOG_ERR(n)   (DIALOG_ERR_BASE - (n))

#define DIALOG_ERR_UNKNOWN_DIALOG         DIALOG_ERR(0)
/* -26001 is ERROR_RQ */
/* -2 is spare */
#define DIALOG_ERR_UNKNOWN_DIALOG_CONTROL DIALOG_ERR(3)
#define DIALOG_ERR_CANT_UI_CONTROL        DIALOG_ERR(4)

/*
callback events to and from dialog processing - a subclass of T5_MESSAGE (numbers optimised for ARM)
*/

/*
commands to dialog manager
*/

typedef enum DIALOG_MESSAGE
{
    DIALOG_MESSAGE_STT                      = 0x10000000,

    DIALOG_CMD_CODE_STT                     = 0x10000000,

    DIALOG_CMD_CODE_PROCESS_DBOX            = 0x10000000,
    DIALOG_CMD_CODE_COMPLETE_DBOX           = 0x10000001,
    DIALOG_CMD_CODE_DEFPUSHBUTTON           = 0x10000002,
    DIALOG_CMD_CODE_HWND_QUERY              = 0x10000003,
    DIALOG_CMD_CODE_NULL_EVENT              = 0x10000004,
    DIALOG_CMD_CODE_NOTE_POSITION_TRASH     = 0x10000005,
    DIALOG_CMD_CODE_DISPOSE_DBOX            = 0x10000006, /* now only for modeless */

    DIALOG_CMD_CODE_CTL_FOCUS_SET           = 0x10000007,
    DIALOG_CMD_CODE_CTL_FOCUS_QUERY         = 0x10000008,
    DIALOG_CMD_CODE_CTL_POSN_QUERY          = 0x10000009,
    DIALOG_CMD_CODE_CTL_PARENT_QUERY        = 0x1000000A,
    DIALOG_CMD_CODE_CTL_SIZE_QUERY          = 0x1000000B,
    DIALOG_CMD_CODE_CTL_SIZE_SET            = 0x1000000C,
    DIALOG_CMD_CODE_CTL_SIZE_ESTIMATE       = 0x1000000D,
    DIALOG_CMD_CODE_CTL_STATE_QUERY         = 0x1000000E,
    DIALOG_CMD_CODE_CTL_STATE_QUERY_DISPOSE = 0x1000000F,
    DIALOG_CMD_CODE_CTL_STATE_SET           = 0x10000010,
    DIALOG_CMD_CODE_CTL_ENCODE              = 0x10000011, /* client has changed control state behind our backs and requires reencoding */
    DIALOG_CMD_CODE_CTL_ENABLE              = 0x10000012,
    DIALOG_CMD_CODE_CTL_ENABLE_QUERY        = 0x10000013,
    DIALOG_CMD_CODE_CTL_NOBBLE              = 0x10000014,
    DIALOG_CMD_CODE_CTL_NEW_SOURCE          = 0x10000015,
    DIALOG_CMD_CODE_CTL_SET_DEFAULT         = 0x10000016,
    DIALOG_CMD_CODE_CTL_UI_CONTROL          = 0x10000017,

    DIALOG_CMD_CODE_END                     = 0x10000018,

/*
messages generated by dialog manager
*/

    DIALOG_MSG_CODE_STT                     = 0x11000000,

    DIALOG_MSG_CODE_CREATE                  = 0x11000000, /* dialog has just been created */
    DIALOG_MSG_CODE_DISPOSE                 = 0x11000001, /* an MSG_CREATEed dialog is about to go away */

    DIALOG_MSG_CODE_PROCESS_START           = 0x11000002,
    DIALOG_MSG_CODE_PROCESS_END             = 0x11000003,

    DIALOG_MSG_CODE_COMPLETE_DBOX           = 0x11000004,

    DIALOG_MSG_CODE_CTL_CREATE              = 0x11000005, /* control has just been created */
    DIALOG_MSG_CODE_CTL_DISPOSE             = 0x11000006, /* an MSG_CTL_CREATEed control is about to go away */

    DIALOG_MSG_CODE_CTL_FILL_SOURCE         = 0x11000007,
    DIALOG_MSG_CODE_CTL_REPOSITION          = 0x11000008, /* control has been repositioned */
    DIALOG_MSG_CODE_CTL_RESIZE              = 0x11000009, /* control has been resized */

    DIALOG_MSG_CODE_CTL_PUSHBUTTON          = 0x1100000A,
    DIALOG_MSG_CODE_CTL_USER_REDRAW         = 0x1100000B,
    DIALOG_MSG_CODE_CTL_USER_MOUSE          = 0x1100000C,
    DIALOG_MSG_CODE_CTL_STATE_CHANGE        = 0x1100000D,
    DIALOG_MSG_CODE_CTL_CURRENT             = 0x1100000E,
    DIALOG_MSG_CODE_CTL_CREATE_STATE        = 0x1100000F, /* an control is about to get MSG_CTL_CREATE but here is the state that wil be set */
    DIALOG_MSG_CODE_CTL_KEY                 = 0x11000010,
    DIALOG_MSG_CODE_CTL_USER_POINTER_QUERY  = 0x11000011,

    DIALOG_MSG_CODE_CURRENT                 = 0x11000012,
    DIALOG_MSG_CODE_DBOX_DESTROY            = 0x11000013,
    DIALOG_MSG_CODE_RESIZE                  = 0x11000014,
    DIALOG_MSG_CODE_PREPROCESS_COMMAND      = 0x11000015,
    DIALOG_MSG_CODE_PERSISTING              = 0x11000016,

    DIALOG_MSG_CODE_END                     = 0x11000017,

/*
host specific events
*/

#if RISCOS
    DIALOG_RISCOS_EVENT_CODE_STT            = 0x12000000,

    DIALOG_RISCOS_EVENT_CODE_REDRAW_WINDOW  = 0x12000000,
    DIALOG_RISCOS_EVENT_CODE_MOUSE_CLICK    = 0x12000001,
    DIALOG_RISCOS_EVENT_CODE_KEY_PRESSED    = 0x12000002,
    DIALOG_RISCOS_EVENT_CODE_USER_DRAG      = 0x12000003,
    DIALOG_RISCOS_EVENT_CODE_RESIZE         = 0x12000004,
    DIALOG_RISCOS_EVENT_CODE_POINTER_ENTER  = 0x12000005,

    DIALOG_RISCOS_EVENT_CODE_END            = 0x12000006,

    DIALOG_MSG_CODE_RISCOS_DRAG_ENDED       = 0x12000010,
#endif

/*
messages generated by some controls
*/

    DIALOG_MSG_CODE_LBN_STT                 = 0x13000000,

    DIALOG_MSG_CODE_LBN_DESTROY             = 0x13000000,
    DIALOG_MSG_CODE_LBN_DBLCLK              = 0x13000001,
    DIALOG_MSG_CODE_LBN_SGLCLK              = 0x13000002,
    DIALOG_MSG_CODE_LBN_KEY                 = 0x13000003,
    DIALOG_MSG_CODE_LBN_FOCUS               = 0x13000004,
    DIALOG_MSG_CODE_LBN_SELCHANGE           = 0x13000005,

    DIALOG_MSG_CODE_LBN_END                 = 0x13000006,

    DIALOG_MESSAGE_END                      = 0x14000000
}
DIALOG_MESSAGE;

/*
dialog event routine prototypes
*/

typedef /*_Check_return_*/ STATUS (* P_PROC_DIALOG_EVENT) (
    _DocuRef_   P_DOCU p_docu,
    _InVal_     DIALOG_MESSAGE dialog_message,
    /*_Inout_*/ P_ANY p_data);

#define PROC_DIALOG_EVENT_PROTO(_e_s, _proc_name) \
_Check_return_ \
_e_s STATUS _proc_name( \
    _DocuRef_   P_DOCU p_docu, \
    _InVal_     DIALOG_MESSAGE dialog_message, \
    /*_Inout_*/ P_ANY p_data)

typedef P_PROC_DIALOG_EVENT * P_P_PROC_DIALOG_EVENT;

/*
user-supplied handle to a dialog control - must be unique within the dialog
also has to fit in Windows' control id type, so restricted to 16 bits
*/

typedef U16 PACKED_DIALOG_CTL_ID;

typedef U32 DIALOG_CONTROL_ID; typedef DIALOG_CONTROL_ID * P_DIALOG_CTL_ID; typedef const DIALOG_CONTROL_ID * PC_DIALOG_CTL_ID;

#define DIALOG_CONTROL_MAX      ((DIALOG_CONTROL_ID) 0x7F00U) /* need to leave room for shifting up by WINDOWS_CTL_ID_STT */

#define DIALOG_CONTROL_INVALID  ((DIALOG_CONTROL_ID) 0xBCBCU)

#if RISCOS /* Windows control ids are defined in WinUser.h - define compatible set for use on RISC OS */
#define IDOK                1U
#define IDCANCEL            2U
#define IDHELP              9U
#endif /* OS */

#define DIALOG_MAIN_GROUP   ((DIALOG_CONTROL_ID) 16U) /* bigger than any Windows-defined id */
#define DIALOG_COL1_GROUP   ((DIALOG_CONTROL_ID) 17U)
#define DIALOG_COL2_GROUP   ((DIALOG_CONTROL_ID) 18U)

/* I reserve up to 32 for myself here */
#define DIALOG_ID_START     ((DIALOG_CONTROL_ID) 32U)

/* 'specials' for relative_dialog_control_id */
#define DIALOG_CONTROL_SELF     ((DIALOG_CONTROL_ID) 0U)
#define DIALOG_CONTROL_PARENT   ((DIALOG_CONTROL_ID) 0xFFFFU)
#define DIALOG_CONTROL_WINDOW   ((DIALOG_CONTROL_ID) 0xFFFEU)
#define DIALOG_CONTROL_CONTENTS ((DIALOG_CONTROL_ID) 0xFFFDU)

#define DIALOG_COMPLETION_CANCEL     STATUS_CANCEL
#define DIALOG_COMPLETION_OK         STATUS_DONE
#define DIALOG_COMPLETION_OK_PERSIST (STATUS_DONE+1)

#define DIALOG_BORDER_STYLE_BITS 7 /* to fit a basic FRAMED_BOX_STYLE (i.e. without disable) */

/*
dialog positions and sizes specified in PIXITS
*/

#define DIALOG_CONTENTS_CALC 1 /* use contents to calculate control size */

#if RISCOS
#define DIALOG_BOX_LM           (16 * PIXITS_PER_RISCOS)
#define DIALOG_BOX_RM           (16 * PIXITS_PER_RISCOS)
#define DIALOG_BOX_TM           (16 * PIXITS_PER_RISCOS)
#define DIALOG_BOX_BM           (16 * PIXITS_PER_RISCOS)

#define DIALOG_SYSCHAR_H        (18 * PIXITS_PER_RISCOS) /* 18 for Corpus.Medium, originally 16 for System Font */
#define DIALOG_NUMCHAR_H        DIALOG_SYSCHAR_H
#define DIALOG_FATCHAR_H        (24 * PIXITS_PER_RISCOS)

#define DIALOG_SYSCHARS_H(string)   DIALOG_SYSCHARSL_H((S32) sizeof(string) - 1) /* keep it signed, in line with all other PIXIT stuff */
#define DIALOG_SYSCHARSL_H(len) (DIALOG_SYSCHAR_H * len)

#define DIALOG_CAPTIONOVH_H     (32 * PIXITS_PER_RISCOS) /* no longer a close icon (and nowadays, an iconise button too, probably...) */

/* NB. to look consistent in different screen modes the vertical and
 * horizontal sizes should be multiples of 4 and 2 OS units respectively
*/
#define DIALOG_MIN_GRAIN_H      ( 2 * PIXITS_PER_RISCOS)
#define DIALOG_MIN_GRAIN_V      ( 4 * PIXITS_PER_RISCOS)

/* these are just nicely done for backwindow icons */
#define DIALOG_BW_CONTROL_HEIGHT (60 * PIXITS_PER_RISCOS)

/* 'bttncur' sized standard tools */
#define PIXITS_PER_STDTOOL_H    (60 * PIXITS_PER_RISCOS)
#define PIXITS_PER_STDTOOL_V    (60 * PIXITS_PER_RISCOS)

#define DIALOG_STDGROUP_LM      (16 * PIXITS_PER_RISCOS)
#define DIALOG_STDGROUP_RM      (16 * PIXITS_PER_RISCOS)
#define DIALOG_STDGROUP_TM      (16 * PIXITS_PER_RISCOS + 32 * PIXITS_PER_RISCOS + 0 * 8 * PIXITS_PER_RISCOS)
#define DIALOG_STDGROUP_BM      (16 * PIXITS_PER_RISCOS)

#define DIALOG_SMALLSPACING_H   ( 8 * PIXITS_PER_RISCOS)
#define DIALOG_SMALLSPACING_V   ( 4 * PIXITS_PER_RISCOS)

#define DIALOG_LABELGAP_H       DIALOG_SMALLSPACING_H   /* Style Guide for bump - label gap */
#define DIALOG_LABELGAP_V       DIALOG_SMALLSPACING_V

#define DIALOG_BUMPUNITSGAP_H   ( 8 * PIXITS_PER_RISCOS) /* RO5SG defined for bump arrows - units label gap */

#define DIALOG_STDSPACING_H     (16 * PIXITS_PER_RISCOS)
#define DIALOG_STDSPACING_V     ( 8 * PIXITS_PER_RISCOS)

#define DIALOG_UNRELSPACING_V   (24 * PIXITS_PER_RISCOS)

#define DIALOG_GROUPSPACING_H   (24 * PIXITS_PER_RISCOS)
#define DIALOG_GROUPSPACING_V   DIALOG_STDSPACING_V

#define DIALOG_PUSHPICTUREOVH_H ( 8 * PIXITS_PER_RISCOS) /* non-thin button border these days */
#define DIALOG_PUSHPICTUREOVH_V ( 8 * PIXITS_PER_RISCOS)

/* default pushbuttons should be similar in size to the analogous pushbuttons but are this much bigger per edge) */
#define DIALOG_DEFPUSHEXTRA_H   ( 8 * PIXITS_PER_RISCOS)
#define DIALOG_DEFPUSHEXTRA_V   ( 8 * PIXITS_PER_RISCOS)

#define DIALOG_STDPUSHBUTTON_V  (52 * PIXITS_PER_RISCOS) /* RO3SG - was 48 */
#define DIALOG_DEFPUSHBUTTON_V  (DIALOG_STDPUSHBUTTON_V + 2 * DIALOG_DEFPUSHEXTRA_V)

#define DIALOG_STDTEXT_V        (32 * PIXITS_PER_RISCOS)

#define DIALOG_STDRADIO_H       (44 * PIXITS_PER_RISCOS)
#define DIALOG_RADIOGAP_H       (12 * PIXITS_PER_RISCOS) /* PRM - was 8 */
#define DIALOG_STDRADIO_V       (44 * PIXITS_PER_RISCOS)

#define DIALOG_STDCHECK_H       (44 * PIXITS_PER_RISCOS)
#define DIALOG_CHECKGAP_H       (12 * PIXITS_PER_RISCOS) /* PRM - was 8 */
#define DIALOG_STDCHECK_V       (44 * PIXITS_PER_RISCOS)

#define DIALOG_BUMPGAP_H        ( 8 * PIXITS_PER_RISCOS)
#define DIALOG_STDBUMP_H        (2 * 2 * 16 * PIXITS_PER_RISCOS)
#define DIALOG_STDBUMP_V        DIALOG_STDEDIT_V

#define DIALOG_STDBUMPOVH_H     (DIALOG_STDEDITOVH_H + DIALOG_BUMPGAP_H + DIALOG_STDBUMP_H)
#define DIALOG_BUMP_H(digits)   (DIALOG_STDBUMPOVH_H + DIALOG_NUMCHAR_H * (digits))

#if 1
#define DIALOG_STDEDIT_V        (52 * PIXITS_PER_RISCOS) /* RO5SG - no fancy borders but extra space for fancy font */
#define DIALOG_MULEDIT_V(n)     ((2 * 2 + 2 * 4 + 34 * (n)) * PIXITS_PER_RISCOS) /* thin borders, small margins */
#else
#define DIALOG_STDEDIT_V        ((2 * 4 + 52) * PIXITS_PER_RISCOS) /* i.e. 60 once again: RO3SG says 68 but that contradicts the description */
#endif
#define DIALOG_STDEDITOVH_H     ((2 * 10 + 6) * PIXITS_PER_RISCOS)

#define DIALOG_MINLISTOVH_H     ((24 + 8) /*was 24 but encourage margins!*/ * PIXITS_PER_RISCOS)
#define DIALOG_STDLISTEXTRA_H   (44 * PIXITS_PER_RISCOS)
#define DIALOG_STDLISTOVH_H     (DIALOG_MINLISTOVH_H + DIALOG_STDLISTEXTRA_H)
#define DIALOG_STDLISTOVH_V     (16 * PIXITS_PER_RISCOS)
#define DIALOG_STDLISTITEM_V    (40 * PIXITS_PER_RISCOS)

#define DIALOG_STDCOMBO_V       DIALOG_STDEDIT_V
#define DIALOG_STDCOMBOOVH_H    (DIALOG_STDEDITOVH_H + (44 * PIXITS_PER_RISCOS) /*gright*/)

#define DIALOG_PUSHBUTTONOVH_H  (2 * DIALOG_SYSCHAR_H)
#define DIALOG_DEFOK_H          (DIALOG_PUSHBUTTONOVH_H + DIALOG_SYSCHARS_H("OK") + (2 * DIALOG_DEFPUSHEXTRA_H))
#define DIALOG_STDCANCEL_H      (DIALOG_PUSHBUTTONOVH_H + DIALOG_SYSCHARS_H("Cancel"))
#define DIALOG_FATCANCEL_H      (DIALOG_PUSHBUTTONOVH_H + DIALOG_SYSCHARS_H("Abbrechen"))
#elif WINDOWS
/* the book says that these should be determined from the parent
 * window's system font metrics but that's a little hopeful!
 *
 * ok here goes (NB true only for System Font):
 * Windows VGA is 96dpi;
 * GetDialogBaseUnits returns 8 as 4x pixels/h-DU (and 16 as 8x pixels/v-DU)
 * i.e. 2 VGA pixels per DU
 * there are 48 DU per inch (I've seen this somewhere before)
 * and hence 1440/48=30 pixits per h-DU and v-DU
 *
 * whereas on Windows XP with the standard theme's message font as 8, Tahoma @96dpi
 * average width calculation yields 6 as 4x pixels/h-DU (and 13 as 8x pixels/v-DU) from MapDialogRect()
 * there are therefore (96*4)/6=64 h-DU per inch and (96*8)/13~=60 v-DU per inch
 * and hence 1440/64=22.5 pixits per h-DU and 1440/~60=24.4 pixits per v-DU
 *
 * a typical Windows Vista with 9, Segoe UI @120dpi
 * average width calculation yields 8 as 4x pixels/h-DU (and 20 as 8x pixels/v-DU) from MapDialogRect()
 * there are therefore (120*4)/8=60 h-DU per inch and (120*8)/20=48 v-DU per inch
 * and hence 1440/60=24 pixits per h-DU and 1440/48=30 pixits per v-DU
 *
 * a typical Windows 7 with 9, Segoe UI @96dpi
 * average width calculation yields 7 as 4x pixels/h-DU (and 15 as 8x pixels/v-DU) from MapDialogRect()
 * there are therefore (96*4)/7=54.9 h-DU per inch and (96*8)/15=51.2 v-DU per inch
 * and hence 1440/54.9=26.25 pixits per h-DU and 1440/51.2=28.1 pixits per v-DU
*/
#if 1 /* experiment here */
#define PIXITS_PER_WDU_H 24
#define PIXITS_PER_WDU_V 30
#else
#define PIXITS_PER_WDU_H 24
#define PIXITS_PER_WDU_V 30
#endif

#define PIXITS_PER_WDFONT_V     ( 8 * PIXITS_PER_WDU_V)
#define __INTERNAL_WD_PER_FONT_V 7

#define DIALOG_BOX_LM           ( 7 * PIXITS_PER_WDU_H)
#define DIALOG_BOX_RM           ( 7 * PIXITS_PER_WDU_H)
#define DIALOG_BOX_TM           ( 7 * PIXITS_PER_WDU_V)
#define DIALOG_BOX_BM           ( 7 * PIXITS_PER_WDU_V)

#define DIALOG_SYSCHAR_H        ( 4 * PIXITS_PER_WDU_H)
#define DIALOG_NUMCHAR_H        ( 4 * PIXITS_PER_WDU_H)
#define DIALOG_FATCHAR_H        (12 * PIXITS_PER_WDU_H)

#define DIALOG_SYSCHARS_H(string)   DIALOG_SYSCHARSL_H((S32) sizeof(string) - 1) /* keep it signed, in line with all other PIXIT stuff */
#define DIALOG_SYSCHARSL_H(len)     (DIALOG_SYSCHAR_H * (len))

#define DIALOG_CAPTIONOVH_H     (24 * PIXITS_PER_WDU_H) /* a system menu and nowadays, a wide close button too */

/* bttncur sized standard tools */
#define PIXITS_PER_STDTOOL_H    (15 * PIXITS_PER_WDU_H) /* now bigger but I don't know why they need to be so big given 16x16 pixel core bitmap! */
#define PIXITS_PER_STDTOOL_V    (14 * PIXITS_PER_WDU_V)

#define DIALOG_STDGROUP_LM      ( 6 * PIXITS_PER_WDU_H)
#define DIALOG_STDGROUP_RM      ( 6 * PIXITS_PER_WDU_H)
#define DIALOG_STDGROUP_TM      ( 4 * PIXITS_PER_WDU_V + PIXITS_PER_WDFONT_V)
#define DIALOG_STDGROUP_BM      ( 7 * PIXITS_PER_WDU_V)

#define DIALOG_SMALLSPACING_H   ( 2 * PIXITS_PER_WDU_H)
#define DIALOG_SMALLSPACING_V   ( 2 * PIXITS_PER_WDU_V)

#define DIALOG_LABELGAP_H       ( 3 * PIXITS_PER_WDU_H)
#define DIALOG_LABELGAP_V       ( 3 * PIXITS_PER_WDU_V)

#define DIALOG_BUMPUNITSGAP_H   DIALOG_LABELGAP_H

#define DIALOG_STDSPACING_H     ( 4 * PIXITS_PER_WDU_H)
#define DIALOG_STDSPACING_V     ( 4 * PIXITS_PER_WDU_V)

#define DIALOG_UNRELSPACING_V   ( 7 * PIXITS_PER_WDU_V)

#define DIALOG_GROUPSPACING_H   ( 7 * PIXITS_PER_WDU_H)
#define DIALOG_GROUPSPACING_V   DIALOG_STDSPACING_V

#if 1 /* Now we are using Themed controls */
#define DIALOG_PUSHPICTUREOVH_H ( 6 * PIXITS_PER_WDU_H)
#define DIALOG_PUSHPICTUREOVH_V ( 6 * PIXITS_PER_WDU_V)
#else
#define DIALOG_PUSHPICTUREOVH_H ( 2 * PIXITS_PER_WDU_H)
#define DIALOG_PUSHPICTUREOVH_V ( 2 * PIXITS_PER_WDU_V)
#endif

/* default pushbuttons should be similar in size to the analogous pushbuttons but are this much bigger per edge) */
#define DIALOG_DEFPUSHEXTRA_H   ( 0 * PIXITS_PER_WDU_H)
#define DIALOG_DEFPUSHEXTRA_V   ( 0 * PIXITS_PER_WDU_V)

#define DIALOG_STDPUSHBUTTON_H  (50 * PIXITS_PER_WDU_H)
#define DIALOG_STDPUSHBUTTON_V  (14 * PIXITS_PER_WDU_V)
#define DIALOG_DEFPUSHBUTTON_V  (DIALOG_STDPUSHBUTTON_V + 2 * DIALOG_DEFPUSHEXTRA_V)

#define DIALOG_STDTEXT_V        PIXITS_PER_WDFONT_V

#define DIALOG_STDRADIO_H       (10 * PIXITS_PER_WDU_H)
#define DIALOG_RADIOGAP_H       ( 4 * PIXITS_PER_WDU_H)
#define DIALOG_STDRADIO_V       (10 * PIXITS_PER_WDU_V)

#define DIALOG_STDCHECK_H       (10 * PIXITS_PER_WDU_H)
#define DIALOG_CHECKGAP_H       ( 4 * PIXITS_PER_WDU_H)
#define DIALOG_STDCHECK_V       (10 * PIXITS_PER_WDU_V)

#define DIALOG_BUMPGAP_H        ( 2 * PIXITS_PER_WDU_V)
#define DIALOG_STDBUMP_H        (12 * PIXITS_PER_WDU_H) /* was 8 */
#define DIALOG_STDBUMP_V        DIALOG_STDEDIT_V

#define DIALOG_STDBUMPOVH_H     (DIALOG_STDEDITOVH_H + DIALOG_BUMPGAP_H + DIALOG_STDBUMP_H)
#define DIALOG_BUMP_H(digits)   (DIALOG_STDBUMPOVH_H + DIALOG_NUMCHAR_H * (digits))

#define DIALOG_STDEDIT_V        (12 * PIXITS_PER_WDU_V) /* 14 in style guide but that's crazy. 10 looks ok on Windows 7 but is too small on Windows XP */
#define DIALOG_MULEDIT_V(n)     ((2 * PIXITS_PER_WDU_V) + (10 * PIXITS_PER_WDU_V) * (n))
#define DIALOG_STDEDITOVH_H     ( 8 * PIXITS_PER_WDU_H)

#define DIALOG_MINLISTOVH_H     ( 4 * PIXITS_PER_WDU_H)
#define DIALOG_STDLISTEXTRA_H   (10 * PIXITS_PER_WDU_H)
#define DIALOG_STDLISTOVH_H     (DIALOG_MINLISTOVH_H + DIALOG_STDLISTEXTRA_H)
#define DIALOG_STDLISTOVH_V     ( 3 * PIXITS_PER_WDU_V) /* was 4 but this is better on W7 */
#define DIALOG_STDLISTITEM_V    ( 8 * PIXITS_PER_WDU_V)

#define DIALOG_STDCOMBO_V       DIALOG_STDEDIT_V
#define DIALOG_STDCOMBOOVH_H    (DIALOG_STDEDITOVH_H + (12 * PIXITS_PER_WDU_H) /*dropdown*/)

#define DIALOG_PUSHBUTTONOVH_H  ( 2 * PIXITS_PER_WDU_H + 6 * PIXITS_PER_WDU_H)
#define DIALOG_DEFOK_H          DIALOG_STDPUSHBUTTON_H
#define DIALOG_STDCANCEL_H      DIALOG_STDPUSHBUTTON_H
#define DIALOG_FATCANCEL_H      DIALOG_STDPUSHBUTTON_H
#endif /* OS */

#define DIALOG_STDWIDTH_MIN     (DIALOG_DEFOK_H + DIALOG_STDSPACING_H + DIALOG_STDCANCEL_H)

#define DIALOG_MMCMIN_UNITS_H   (DIALOG_FATCHAR_H * 2) /* for mm, cm, in */
#define DIALOG_POINTS_UNITS_H   DIALOG_SYSCHARS_H("points") /* for points */

/*
radio buttons now get S32 states
*/

#define DIALOG_RADIOSTATE S32

/*
on/off button states
*/

#define DIALOG_BUTTONSTATE_OFF 0
#define DIALOG_BUTTONSTATE_ON  1

#ifdef DIALOG_HAS_TRISTATE

/*
3-state button states
*/

#define DIALOG_TRISTATE_OFF DIALOG_BUTTONSTATE_OFF
#define DIALOG_TRISTATE_ON  DIALOG_BUTTONSTATE_ON
#define DIALOG_TRISTATE_DONT_CARE 2

#endif

/*
types of control in an on-screen dialog
*/

typedef enum DIALOG_CONTROL_TYPE
{
    DIALOG_CONTROL_GROUPBOX         = 128,
    DIALOG_CONTROL_STATICPICTURE    = 129,
    DIALOG_CONTROL_STATICTEXT       = 130,
#define DIALOG_CONTROL_STATICTEXTw DIALOG_CONTROL_STATICTEXT /* transitional, indicating windows_no_colon removed */
    DIALOG_CONTROL_TEXTLABEL        = 131,
    DIALOG_CONTROL_TEXTFRAME        = 132,
    DIALOG_CONTROL_PUSHBUTTON       = 133,
    DIALOG_CONTROL_PUSHPICTURE      = 134,
    DIALOG_CONTROL_RADIOBUTTON      = 135,
    DIALOG_CONTROL_RADIOPICTURE     = 136,
    DIALOG_CONTROL_CHECKBOX         = 137,
    DIALOG_CONTROL_CHECKPICTURE     = 138,
    DIALOG_CONTROL_EDIT             = 139,
    DIALOG_CONTROL_BUMP_S32         = 140,
    DIALOG_CONTROL_BUMP_F64         = 141,
    DIALOG_CONTROL_LIST_TEXT        = 142,
    DIALOG_CONTROL_LIST_S32         = 143,
    DIALOG_CONTROL_COMBO_TEXT       = 144,
    DIALOG_CONTROL_COMBO_S32        = 145,
    DIALOG_CONTROL_USER             = 146

#ifdef DIALOG_HAS_TRISTATE
    ,
    DIALOG_CONTROL_TRISTATE         = 147,
    DIALOG_CONTROL_TRIPICTURE       = 148
#endif

#if RISCOS
    ,
    DIALOG_CONTROL_GROUPBOX_PX100   = DIALOG_CONTROL_GROUPBOX + 0x100,
    DIALOG_CONTROL_BUMP_S32_PX100   = DIALOG_CONTROL_BUMP_S32 + 0x100,
    DIALOG_CONTROL_BUMP_S32_PX200   = DIALOG_CONTROL_BUMP_S32 + 0x200,
    DIALOG_CONTROL_COMBO_TEXT_PX100 = DIALOG_CONTROL_COMBO_TEXT + 0x100
#endif
}
DIALOG_CONTROL_TYPE;

#define DIALOG_RELATIVE_BIT_L 0
#define DIALOG_RELATIVE_BIT_T 1
#define DIALOG_RELATIVE_BIT_R 2
#define DIALOG_RELATIVE_BIT_B 3

/*
useful shorthand for filling in the bit pairs in a DIALOG_CONTROL_BITS
*/

#define DIALOG_RELATIVE_BIT_LTLT DIALOG_RELATIVE_BIT_L, DIALOG_RELATIVE_BIT_T, DIALOG_RELATIVE_BIT_L, DIALOG_RELATIVE_BIT_T
#define DIALOG_RELATIVE_BIT_LTLB DIALOG_RELATIVE_BIT_L, DIALOG_RELATIVE_BIT_T, DIALOG_RELATIVE_BIT_L, DIALOG_RELATIVE_BIT_B
#define DIALOG_RELATIVE_BIT_LTRT DIALOG_RELATIVE_BIT_L, DIALOG_RELATIVE_BIT_T, DIALOG_RELATIVE_BIT_R, DIALOG_RELATIVE_BIT_T
#define DIALOG_RELATIVE_BIT_LTRB DIALOG_RELATIVE_BIT_L, DIALOG_RELATIVE_BIT_T, DIALOG_RELATIVE_BIT_R, DIALOG_RELATIVE_BIT_B
#define DIALOG_RELATIVE_BIT_LBLT DIALOG_RELATIVE_BIT_L, DIALOG_RELATIVE_BIT_B, DIALOG_RELATIVE_BIT_L, DIALOG_RELATIVE_BIT_T
#define DIALOG_RELATIVE_BIT_LBLB DIALOG_RELATIVE_BIT_L, DIALOG_RELATIVE_BIT_B, DIALOG_RELATIVE_BIT_L, DIALOG_RELATIVE_BIT_B
#define DIALOG_RELATIVE_BIT_LBRT DIALOG_RELATIVE_BIT_L, DIALOG_RELATIVE_BIT_B, DIALOG_RELATIVE_BIT_R, DIALOG_RELATIVE_BIT_T
#define DIALOG_RELATIVE_BIT_LBRB DIALOG_RELATIVE_BIT_L, DIALOG_RELATIVE_BIT_B, DIALOG_RELATIVE_BIT_R, DIALOG_RELATIVE_BIT_B
#define DIALOG_RELATIVE_BIT_RTLT DIALOG_RELATIVE_BIT_R, DIALOG_RELATIVE_BIT_T, DIALOG_RELATIVE_BIT_L, DIALOG_RELATIVE_BIT_T
#define DIALOG_RELATIVE_BIT_RTLB DIALOG_RELATIVE_BIT_R, DIALOG_RELATIVE_BIT_T, DIALOG_RELATIVE_BIT_L, DIALOG_RELATIVE_BIT_B
#define DIALOG_RELATIVE_BIT_RTRT DIALOG_RELATIVE_BIT_R, DIALOG_RELATIVE_BIT_T, DIALOG_RELATIVE_BIT_R, DIALOG_RELATIVE_BIT_T
#define DIALOG_RELATIVE_BIT_RTRB DIALOG_RELATIVE_BIT_R, DIALOG_RELATIVE_BIT_T, DIALOG_RELATIVE_BIT_R, DIALOG_RELATIVE_BIT_B
#define DIALOG_RELATIVE_BIT_RBLT DIALOG_RELATIVE_BIT_R, DIALOG_RELATIVE_BIT_B, DIALOG_RELATIVE_BIT_L, DIALOG_RELATIVE_BIT_T
#define DIALOG_RELATIVE_BIT_RBLB DIALOG_RELATIVE_BIT_R, DIALOG_RELATIVE_BIT_B, DIALOG_RELATIVE_BIT_L, DIALOG_RELATIVE_BIT_B
#define DIALOG_RELATIVE_BIT_RBRT DIALOG_RELATIVE_BIT_R, DIALOG_RELATIVE_BIT_B, DIALOG_RELATIVE_BIT_R, DIALOG_RELATIVE_BIT_T
#define DIALOG_RELATIVE_BIT_RBRB DIALOG_RELATIVE_BIT_R, DIALOG_RELATIVE_BIT_B, DIALOG_RELATIVE_BIT_R, DIALOG_RELATIVE_BIT_B

/* token pasting to the rescue! */
#define DRT(LBRT, TYPE) DIALOG_RELATIVE_BIT_ ## LBRT, DIALOG_CONTROL_ ## TYPE

typedef struct DIALOG_CONTROL
{
    PACKED_DIALOG_CTL_ID    dialog_control_id;              /* id for this control */
    PACKED_DIALOG_CTL_ID    parent_dialog_control_id;       /* either DIALOG_CONTROL_WINDOW or real group id */

    PACKED_DIALOG_CTL_ID    relative_dialog_control_id[4];  /* '<0' special, 0 for self relative, >0 for other control relative */
    PIXIT                   relative_offset[4];             /* edge offset */

    struct DIALOG_CONTROL_BITS
    {
        /* four pairs of bits - must be at start of bits */
        UBF tl_relative_x : 2; /* l or r */
        UBF tl_relative_y : 2; /* b or t */
        UBF br_relative_x : 2; /* l or r */
        UBF br_relative_y : 2; /* b or t */

        UBF packed_dialog_control_type : 8; /* DIALOG_CONTROL_TYPE */

        UBF tabstop       : 1;

        UBF logical_group : 1; /* GROUPBOX: can have logical group with no data for shorter defs; OTHER: this control should have WS_GROUP on Windows */

        UBF has_help      : 1;

        UBF reserved      : 8*sizeof(int) - (4*2 + 8 + 3*1);
    } bits;
}
DIALOG_CONTROL; typedef const DIALOG_CONTROL * PC_DIALOG_CONTROL;

typedef struct DIALOG_CONTROLH
{
    DIALOG_CONTROL dialog_control;

    UI_TEXT interactive_help;
}
DIALOG_CONTROLH; typedef const DIALOG_CONTROLH * PC_DIALOG_CONTROLH;

/*
NB. can't have bodies of control data being in a union
if we want to use initialisers
*/

/*
a group box
*/

typedef struct DIALOG_CONTROL_DATA_GROUPBOX
{
    UI_TEXT caption;

    struct DIALOG_CONTROL_DATA_GROUPBOX_BITS
    {
        UBF border_style  : 8;
        UBF _spare_was_logical_group : 1;
#if defined(DIALOG_GROUPBOX_CAN_HAVE_HANDLER)
        UBF has_client : 1;
#else
        UBF _spare_was_has_client : 1;
#endif
        UBF reserved      : 8*sizeof(int) - (8 +1 +1);
    } bits;
}
DIALOG_CONTROL_DATA_GROUPBOX; typedef const DIALOG_CONTROL_DATA_GROUPBOX * PC_DIALOG_CONTROL_DATA_GROUPBOX;

/*
a static text
*/

typedef struct DIALOG_CONTROL_DATA_STATICTEXT
{
    UI_TEXT caption;

    struct DIALOG_CONTROL_DATA_STATICTEXT_BITS
    {
        UBF left_text    : 1; /* optional text goes on left (default is right) */
        UBF centre_text  : 1;
        UBF __windows_no_colon : 1; /* TODO: remove */
      /*UBF _spare       : sizeof(int)*8 - 2*1;*/
    } bits;
}
DIALOG_CONTROL_DATA_STATICTEXT; typedef const DIALOG_CONTROL_DATA_STATICTEXT * PC_DIALOG_CONTROL_DATA_STATICTEXT;

/*
a text label (associated with another control, labelling it)
*/

typedef struct DIALOG_CONTROL_DATA_TEXTLABEL
{
    UI_TEXT caption;

    struct DIALOG_CONTROL_DATA_TEXTLABEL_BITS
    {
        UBF left_text    : 1; /* optional text goes on left (default is right) */
        UBF centre_text  : 1;
        UBF windows_no_colon : 1;
      /*UBF _spare       : sizeof(int)*8 - 3*1;*/
    } bits;
}
DIALOG_CONTROL_DATA_TEXTLABEL; typedef const DIALOG_CONTROL_DATA_TEXTLABEL * PC_DIALOG_CONTROL_DATA_TEXTLABEL;

/*
a text frame
*/

typedef struct DIALOG_CONTROL_DATA_TEXTFRAME
{
    UI_TEXT caption;

    struct DIALOG_CONTROL_DATA_TEXTFRAME_BITS
    {
        UBF left_text    : 1; /* optional text goes on left (default is right) */
        UBF centre_text  : 1;
        UBF reserved     : 8-1-1;
        UBF border_style : 8;
      /*UBF _spare       : sizeof(int)*8 - 16;*/
    } bits;

    P_RGB p_back_colour; /* NULL->none */
}
DIALOG_CONTROL_DATA_TEXTFRAME; typedef const DIALOG_CONTROL_DATA_TEXTFRAME * PC_DIALOG_CONTROL_DATA_TEXTFRAME;

/*
a static picture
*/

typedef struct DIALOG_CONTROL_DATA_STATICPICTURE
{
    RESOURCE_BITMAP_ID picture_bitmap_id;
}
DIALOG_CONTROL_DATA_STATICPICTURE; typedef const DIALOG_CONTROL_DATA_STATICPICTURE * PC_DIALOG_CONTROL_DATA_STATICPICTURE;

/*
a push button
*/

typedef struct DIALOG_CONTROL_DATA_PUSH_COMMAND
{
    T5_MESSAGE      t5_message;          /* 0->none*/
    OBJECT_ID       object_id;
    PC_ARG_TYPE     p_arg_type;          /* NULL->none or dialog lookup arglist, else [] for arglist */
    PC_DIALOG_CTL_ID p_dialog_control_id; /* -> list of corresponding control ids */

    struct DIALOG_CONTROL_DATA_PUSH_COMMAND_BITS
    {
        UBF old_set_viw     : 1; /* retained for source compatibility */
        UBF set_interactive : 1;
        UBF dont_complete   : 1;
        UBF lookup_arglist  : 1;
    } bits;
}
DIALOG_CONTROL_DATA_PUSH_COMMAND; typedef const DIALOG_CONTROL_DATA_PUSH_COMMAND * PC_DIALOG_CONTROL_DATA_PUSH_COMMAND;

typedef struct DIALOG_CONTROL_DATA_PUSH_XX
{
    S32 completion_code; /* cannot be 0 as a completion code */

    UBF help_id_offset : 8;

    UBF def_pushbutton : 1; /* NB IDOK overrides this so watch out! */
    UBF alternate_right : 1;
    UBF auto_repeat : 1;
    UBF not_dlg_framed  : 1;
    UBF no_memory_froth_check : 1;
    UBF spare_2 : 1;
    UBF spare_3 : 1;
    UBF spare_4 : 1;

    UBF hot_key : 8; /* UC letter */

    UBF spare_8 : 8;
}
DIALOG_CONTROL_DATA_PUSH_XX;

typedef struct DIALOG_CONTROL_DATA_PUSHBUTTON
{
    DIALOG_CONTROL_DATA_PUSH_XX push_xx;

    UI_TEXT caption;

    PC_DIALOG_CONTROL_DATA_PUSH_COMMAND command;
}
DIALOG_CONTROL_DATA_PUSHBUTTON; typedef const DIALOG_CONTROL_DATA_PUSHBUTTON * PC_DIALOG_CONTROL_DATA_PUSHBUTTON;

typedef struct DIALOG_CONTROL_DATA_PUSHBUTTONR
{
    DIALOG_CONTROL_DATA_PUSH_XX push_xx;

    UI_TEXT caption;

    S32 completion_code_r;
}
DIALOG_CONTROL_DATA_PUSHBUTTONR; typedef const DIALOG_CONTROL_DATA_PUSHBUTTONR * PC_DIALOG_CONTROL_DATA_PUSHBUTTONR;

/*
a push button with a picture
*/

typedef struct DIALOG_CONTROL_DATA_PUSHPICTURE
{
    DIALOG_CONTROL_DATA_PUSH_XX push_xx;

    RESOURCE_BITMAP_ID picture_bitmap_id;

    PC_DIALOG_CONTROL_DATA_PUSH_COMMAND command;

    P_RGB p_back_colour; /* NULL->none */
}
DIALOG_CONTROL_DATA_PUSHPICTURE; typedef const DIALOG_CONTROL_DATA_PUSHPICTURE * PC_DIALOG_CONTROL_DATA_PUSHPICTURE;

typedef struct DIALOG_CONTROL_DATA_PUSHPICTURER
{
    DIALOG_CONTROL_DATA_PUSH_XX push_xx;

    RESOURCE_BITMAP_ID picture_bitmap_id;

    S32 completion_code_r;

    P_RGB p_back_colour; /* NULL->none */
}
DIALOG_CONTROL_DATA_PUSHPICTURER; typedef const DIALOG_CONTROL_DATA_PUSHPICTURER * PC_DIALOG_CONTROL_DATA_PUSHPICTURER;

/*
1-of-m radio button
*/

typedef struct DIALOG_CONTROL_DATA_RADIOCHECK_BITS
{
    UBF left_text  : 1; /* optional text goes on left of radio button/check box (default is right) */
    UBF move_focus : 1;

    UBF has_n_bmp  : 1; /* has two/three different bitmaps IFF PICT */
}
DIALOG_CONTROL_DATA_RADIOCHECK_BITS;

typedef struct DIALOG_CONTROL_DATA_RADIOBUTTON
{
    DIALOG_CONTROL_DATA_RADIOCHECK_BITS bits;

    /* radio button is on if arg is this value (normally a character
     * rather than an index to allow for different sets of options
     * and ordering between versions/implementations)
    */
    DIALOG_RADIOSTATE activate_state;

    UI_TEXT caption;
}
DIALOG_CONTROL_DATA_RADIOBUTTON; typedef const DIALOG_CONTROL_DATA_RADIOBUTTON * PC_DIALOG_CONTROL_DATA_RADIOBUTTON;

typedef struct DIALOG_CONTROL_DATA_RADIOBUTTONF
{
    DIALOG_CONTROL_DATA_RADIOBUTTON radiobutton;

    DIALOG_CONTROL_ID move_focus_dialog_control_id; /* valid iff bits.move_focus */
}
DIALOG_CONTROL_DATA_RADIOBUTTONF; typedef const DIALOG_CONTROL_DATA_RADIOBUTTONF * PC_DIALOG_CONTROL_DATA_RADIOBUTTONF;

typedef struct DIALOG_CONTROL_DATA_RADIOPICTURE
{
    DIALOG_CONTROL_DATA_RADIOCHECK_BITS bits;

    /* radio button is on if arg is this value (normally a character
     * rather than an index to allow for different sets of options
     * and ordering between versions/implementations)
    */
    DIALOG_RADIOSTATE activate_state;

    PC_RESOURCE_BITMAP_ID p_bitmap_id_offon; /*[1/2]; NULL->default */
}
DIALOG_CONTROL_DATA_RADIOPICTURE; typedef const DIALOG_CONTROL_DATA_RADIOPICTURE * PC_DIALOG_CONTROL_DATA_RADIOPICTURE;

/*
2-state check box (on, off)
*/

typedef struct DIALOG_CONTROL_DATA_CHECKBOX
{
    DIALOG_CONTROL_DATA_RADIOCHECK_BITS bits;

    UI_TEXT caption;

    U8 init_state;
}
DIALOG_CONTROL_DATA_CHECKBOX; typedef const DIALOG_CONTROL_DATA_CHECKBOX * PC_DIALOG_CONTROL_DATA_CHECKBOX;

typedef struct DIALOG_CONTROL_DATA_CHECKBOXF
{
    DIALOG_CONTROL_DATA_CHECKBOX checkbox;

    DIALOG_CONTROL_ID move_focus_dialog_control_id;
}
DIALOG_CONTROL_DATA_CHECKBOXF; typedef const DIALOG_CONTROL_DATA_CHECKBOXF * PC_DIALOG_CONTROL_DATA_CHECKBOXF;

typedef struct DIALOG_CONTROL_DATA_CHECKPICTURE
{
    DIALOG_CONTROL_DATA_RADIOCHECK_BITS bits;

    PC_RESOURCE_BITMAP_ID p_bitmap_id_offon; /*[1/2]; NULL->default */

    U8 init_state;
}
DIALOG_CONTROL_DATA_CHECKPICTURE; typedef const DIALOG_CONTROL_DATA_CHECKPICTURE * PC_DIALOG_CONTROL_DATA_CHECKPICTURE;

#ifdef DIALOG_HAS_TRISTATE

/*
3-state check box (none, on, off)
*/

typedef struct DIALOG_CONTROL_DATA_TRISTATE
{
    DIALOG_CONTROL_DATA_RADIOCHECK_BITS bits;

    UI_TEXT caption;

    U8 init_state;
}
DIALOG_CONTROL_DATA_TRISTATE; typedef const DIALOG_CONTROL_DATA_TRISTATE * PC_DIALOG_CONTROL_DATA_TRISTATE;

typedef struct DIALOG_CONTROL_DATA_TRISTATEF
{
    DIALOG_CONTROL_DATA_CHECKBOX tristate;

    DIALOG_CONTROL_ID move_focus_dialog_control_id;
}
DIALOG_CONTROL_DATA_TRISTATEF; typedef const DIALOG_CONTROL_DATA_TRISTATEF * PC_DIALOG_CONTROL_DATA_TRISTATEF;

typedef struct DIALOG_CONTROL_DATA_TRIPICTURE
{
    DIALOG_CONTROL_DATA_RADIOCHECK_BITS bits;

    PC_RESOURCE_BITMAP_ID p_bitmap_id_offondontcare; /*[3]; NULL->default */

    U8 init_state;
}
DIALOG_CONTROL_DATA_TRIPICTURE; typedef const DIALOG_CONTROL_DATA_TRIPICTURE * PC_DIALOG_CONTROL_DATA_TRIPICTURE;

#endif

/*
edit-like controls
*/

typedef struct DIALOG_CONTROL_DATA_EDIT_XX
{
    struct DIALOG_CONTROL_DATA_EDIT_XX_BITS
    {
        UBF border_style        : DIALOG_BORDER_STYLE_BITS;

        UBF read_only           : 1;
        UBF right_text          : 1;
        UBF multiline           : 1;
        UBF h_scroll            : 1;
        UBF v_scroll            : 1;
        UBF always_update_later : 1;

        UBF reserved            : 8*sizeof(int) - (DIALOG_BORDER_STYLE_BITS + 6*1);
    } bits;

    const BITMAP_WORD * p_bitmap_validation; /* NULL -> use class default */
}
DIALOG_CONTROL_DATA_EDIT_XX; typedef const DIALOG_CONTROL_DATA_EDIT_XX * PC_DIALOG_CONTROL_DATA_EDIT_XX;

typedef struct DIALOG_CONTROL_DATA_EDIT
{
    DIALOG_CONTROL_DATA_EDIT_XX edit_xx;

    UI_TEXT state;
}
DIALOG_CONTROL_DATA_EDIT; typedef const DIALOG_CONTROL_DATA_EDIT * PC_DIALOG_CONTROL_DATA_EDIT;

typedef struct DIALOG_CONTROL_DATA_BUMP_XX
{
    DIALOG_CONTROL_DATA_EDIT_XX edit_xx;

    const void * p_uic; /* really either a P_UI_CONTROL_S32/P_UI_CONTROL_F64 but unions cause trouble */
}
DIALOG_CONTROL_DATA_BUMP_XX; typedef const DIALOG_CONTROL_DATA_BUMP_XX * PC_DIALOG_CONTROL_DATA_BUMP_XX;

typedef struct DIALOG_CONTROL_DATA_BUMP_S32
{
    DIALOG_CONTROL_DATA_BUMP_XX bump_xx;

    S32 state;
}
DIALOG_CONTROL_DATA_BUMP_S32; typedef const DIALOG_CONTROL_DATA_BUMP_S32 * PC_DIALOG_CONTROL_DATA_BUMP_S32;

typedef struct DIALOG_CONTROL_DATA_BUMP_F64
{
    DIALOG_CONTROL_DATA_BUMP_XX bump_xx;

    F64 state;
}
DIALOG_CONTROL_DATA_BUMP_F64; typedef const DIALOG_CONTROL_DATA_BUMP_F64 * PC_DIALOG_CONTROL_DATA_BUMP_F64;

typedef struct DIALOG_CONTROL_DATA_LIST_XX
{
    struct DIALOG_CONTROL_DATA_LIST_XX_BITS
    {
        UBF force_v_scroll : 1;
        UBF disable_double : 1;
        UBF tab_position   : 8;
    } bits;
}
DIALOG_CONTROL_DATA_LIST_XX;

typedef struct DIALOG_CONTROL_DATA_LIST_TEXT
{
    DIALOG_CONTROL_DATA_LIST_XX list_xx;

    UI_TEXT state;
}
DIALOG_CONTROL_DATA_LIST_TEXT; typedef const DIALOG_CONTROL_DATA_LIST_TEXT * PC_DIALOG_CONTROL_DATA_LIST_TEXT;

typedef struct DIALOG_CONTROL_DATA_LIST_S32
{
    DIALOG_CONTROL_DATA_LIST_XX list_xx;

    const struct UI_CONTROL_S32 * p_ui_control_s32;

    S32 state;
}
DIALOG_CONTROL_DATA_LIST_S32; typedef const DIALOG_CONTROL_DATA_LIST_S32 * PC_DIALOG_CONTROL_DATA_LIST_S32;

typedef struct DIALOG_CONTROL_DATA_COMBO_XX
{
    DIALOG_CONTROL_DATA_EDIT_XX edit_xx;
    DIALOG_CONTROL_DATA_LIST_XX list_xx;

    PC_RESOURCE_BITMAP_ID p_bitmap_id_dropdown; /* NULL->default */

    PIXIT dropdown_size;

#if RISCOS
    PC_UI_TEXT dropdown_title;
#endif
}
DIALOG_CONTROL_DATA_COMBO_XX; typedef const DIALOG_CONTROL_DATA_COMBO_XX * PC_DIALOG_CONTROL_DATA_COMBO_XX;

typedef struct DIALOG_CONTROL_DATA_COMBO_TEXT
{
    DIALOG_CONTROL_DATA_COMBO_XX combo_xx;

    UI_TEXT state;
}
DIALOG_CONTROL_DATA_COMBO_TEXT; typedef const DIALOG_CONTROL_DATA_COMBO_TEXT * PC_DIALOG_CONTROL_DATA_COMBO_TEXT;

typedef struct DIALOG_CONTROL_DATA_COMBO_S32
{
    DIALOG_CONTROL_DATA_COMBO_XX combo_xx;

    const struct UI_CONTROL_S32 * p_ui_control_s32;

    S32 state;
}
DIALOG_CONTROL_DATA_COMBO_S32; typedef const DIALOG_CONTROL_DATA_COMBO_S32 * PC_DIALOG_CONTROL_DATA_COMBO_S32;

union DIALOG_CONTROL_DATA_USER_STATE
{
    U32 u32;
    RGB rgb;
};

typedef struct DIALOG_CONTROL_DATA_USER
{
    union DIALOG_CONTROL_DATA_USER_STATE state;

    struct DIALOG_CONTROL_DATA_USER_BITS
    {
        UBF border_style : DIALOG_BORDER_STYLE_BITS;
        UBF state_is_rgb : 1; /* what a bodge, but what a bodge! */
        UBF state_is_rgb_stash_index : 1; /* but even more so! */
    } bits;

    P_RGB p_back_colour; /* NULL->none */
}
DIALOG_CONTROL_DATA_USER; typedef const DIALOG_CONTROL_DATA_USER * PC_DIALOG_CONTROL_DATA_USER;

typedef union PC_DIALOG_CONTROL_DATA
{
    PC_ANY                                  p_any;

    PC_DIALOG_CONTROL_DATA_GROUPBOX         groupbox;

    PC_DIALOG_CONTROL_DATA_STATICPICTURE    staticpicture;
    PC_DIALOG_CONTROL_DATA_STATICTEXT       statictext;
    PC_DIALOG_CONTROL_DATA_TEXTLABEL        textlabel;
    PC_DIALOG_CONTROL_DATA_TEXTFRAME        textframe;

    PC_DIALOG_CONTROL_DATA_PUSHBUTTON       pushbutton;
    PC_DIALOG_CONTROL_DATA_PUSHBUTTONR      pushbuttonr;

    PC_DIALOG_CONTROL_DATA_PUSHPICTURE      pushpicture;
    PC_DIALOG_CONTROL_DATA_PUSHPICTURER     pushpicturer;

    PC_DIALOG_CONTROL_DATA_RADIOBUTTON      radiobutton;
    PC_DIALOG_CONTROL_DATA_RADIOBUTTONF     radiobuttonf;
    PC_DIALOG_CONTROL_DATA_RADIOPICTURE     radiopicture;

    PC_DIALOG_CONTROL_DATA_CHECKBOX         checkbox;
    PC_DIALOG_CONTROL_DATA_CHECKBOXF        checkboxf;
    PC_DIALOG_CONTROL_DATA_CHECKPICTURE     checkpicture;

#ifdef DIALOG_HAS_TRISTATE
    PC_DIALOG_CONTROL_DATA_TRISTATE         tristate;
    PC_DIALOG_CONTROL_DATA_TRISTATEF        tristatef;
    PC_DIALOG_CONTROL_DATA_TRIPICTURE       tripicture;
#endif

    PC_DIALOG_CONTROL_DATA_EDIT             edit;
    PC_DIALOG_CONTROL_DATA_BUMP_S32         bump_s32;
    PC_DIALOG_CONTROL_DATA_BUMP_F64         bump_f64;
    PC_DIALOG_CONTROL_DATA_LIST_TEXT        list_text;
    PC_DIALOG_CONTROL_DATA_LIST_S32         list_s32;
    PC_DIALOG_CONTROL_DATA_COMBO_TEXT       combo_text;
    PC_DIALOG_CONTROL_DATA_COMBO_S32        combo_s32;

    PC_DIALOG_CONTROL_DATA_USER             user;

    /* common */
    PC_DIALOG_CONTROL_DATA_BUMP_XX          bump_xx;
}
PC_DIALOG_CONTROL_DATA;

/*
control creation structure
*/

typedef union P_DIALOG_CTL_CREATE_CONTROL
{
    const void * p_any;
    PC_DIALOG_CONTROL p_dialog_control;
    PC_DIALOG_CONTROLH p_dialog_controlh;
}
P_DIALOG_CTL_CREATE_CONTROL;

typedef struct DIALOG_CTL_CREATE
{
    P_DIALOG_CTL_CREATE_CONTROL p_dialog_control;

    PC_DIALOG_CONTROL_DATA p_dialog_control_data;
}
DIALOG_CTL_CREATE, * P_DIALOG_CTL_CREATE_RW; typedef const DIALOG_CTL_CREATE * P_DIALOG_CTL_CREATE;

/*
DIALOG_CMD_CODE_PROCESS_DBOX

notes p_docu from dialog(p_docu, ...) - only one of two calls where this happens
*/

#if RISCOS
/*
controls mechanism by which the dialog window is opened and maintained on RISC OS
dialog manager may move downwards as some controls forbid higher mechanisms
*/

#define DIALOG_RISCOS_STANDALONE_MENU    2
#define DIALOG_RISCOS_MENU               1 /* normal submenu if allowed */
#define DIALOG_RISCOS_NOT_MENU           0
#endif /* RISCOS */

typedef enum DIALOG_POSITION_TYPE
{
    DIALOG_POSITION_DEFAULT = 0, /* system-dependent */
    DIALOG_POSITION_NEAR_MOUSE,
    DIALOG_POSITION_CENTRE_SCREEN,
    DIALOG_POSITION_CENTRE_WINDOW,
    DIALOG_POSITION_CENTRE_MOUSE
}
DIALOG_POSITION_TYPE;

typedef struct DIALOG_CMD_PROCESS_DBOX
{
    CLIENT_HANDLE client_handle; /*IN*/
    P_PROC_DIALOG_EVENT p_proc_client; /*IN*/ /* callback event procedure for messages generated by dialog manager */

    P_DIALOG_CTL_CREATE p_ctl_create; /*IN ->[n_ctls]*/
    U32 n_ctls; /*IN*/ /* may be 0 */
    STATUS help_topic_resource_id; /*IN*/

    UI_TEXT caption;   /*IN*/ /* dialog will take a ***copy*** of dialog caption from this */

    struct DIALOG_CMD_PROCESS_DBOX_BITS
    {
        UBF modeless                : 1;
        UBF note_position           : 1;
        UBF use_windows_hwnd        : 1;
        UBF use_riscos_menu         : 1;

        UBF dialog_position_type    : 4; /* packed DIALOG_POSITION_TYPE */

        UBF reserved                : 8*sizeof(int) - (4 + 4*1);
    } bits;

    S32 modal_completion_code; /*OUT*/
    H_DIALOG modeless_h_dialog; /*OUT*/

#if RISCOS
    struct DIALOG_CMD_PROCESS_DBOX_RISCOS
    {
        S32 menu;
    } riscos;
#elif WINDOWS
    struct DIALOG_CMD_PROCESS_DBOX_WINDOW
    {
        HWND hwnd; /* use this as the parent window for the dialog */
    } windows;
#endif
}
DIALOG_CMD_PROCESS_DBOX, * P_DIALOG_CMD_PROCESS_DBOX;

typedef struct DIALOG_CMD_COMPLETE_DBOX
{
    H_DIALOG      h_dialog;      /*IN*/

    S32           completion_code;
}
DIALOG_CMD_COMPLETE_DBOX, * P_DIALOG_CMD_COMPLETE_DBOX;

/*
DIALOG_CMD_CODE_ENCODE

client has changed some control's data, so wants all controls reencoding
*/

typedef struct DIALOG_CMD_ENCODE
{
    H_DIALOG      h_dialog;      /*IN*/
}
DIALOG_CMD_ENCODE, * P_DIALOG_CMD_ENCODE;

/*
DIALOG_CMD_CODE_DISPOSE_DBOX

only for modeless cancelling
*/

typedef struct DIALOG_CMD_DISPOSE_DBOX
{
    H_DIALOG      h_dialog;      /*IN*/
}
DIALOG_CMD_DISPOSE_DBOX, * P_DIALOG_CMD_DISPOSE_DBOX;

/*
DIALOG_CMD_CODE_DEFPUSHBUTTON
*/

/*
control handling
*/

typedef struct DIALOG_CMD_DEFPUSHBUTTON
{
    H_DIALOG            h_dialog;           /*IN*/

    DIALOG_CONTROL_ID   double_dialog_control_id; /*IN*/
}
DIALOG_CMD_DEFPUSHBUTTON, * P_DIALOG_CMD_DEFPUSHBUTTON;

/*
DIALOG_CMD_CODE_CTL_ENABLE

controls may want enabling/disabling
*/

typedef struct DIALOG_CMD_CTL_ENABLE
{
    H_DIALOG            h_dialog;           /*IN*/

    DIALOG_CONTROL_ID   dialog_control_id;  /*IN*/

    S32                 enabled;            /*IN*/
}
DIALOG_CMD_CTL_ENABLE, * P_DIALOG_CMD_CTL_ENABLE;

/*
DIALOG_CMD_CODE_CTL_NOBBLE

controls may want nobbling
*/

typedef struct DIALOG_CMD_CTL_NOBBLE
{
    H_DIALOG            h_dialog;           /*IN*/

    DIALOG_CONTROL_ID   dialog_control_id;  /*IN*/

    S32                 nobbled;            /*IN*/
}
DIALOG_CMD_CTL_NOBBLE, * P_DIALOG_CMD_CTL_NOBBLE;

/*
DIALOG_CMD_CODE_CTL_NEW_SOURCE

controls has been given a new source of data (typically list box's strings)
*/

typedef struct DIALOG_CMD_CTL_NEW_SOURCE
{
    H_DIALOG            h_dialog;           /*IN*/

    DIALOG_CONTROL_ID   dialog_control_id;  /*IN*/
}
DIALOG_CMD_CTL_NEW_SOURCE, * P_DIALOG_CMD_CTL_NEW_SOURCE;

/*
DIALOG_CMD_CODE_CTL_ENABLE_QUERY

query enable/disable state of control
*/

typedef struct DIALOG_CMD_CTL_ENABLE_QUERY
{
    H_DIALOG            h_dialog;           /*IN*/

    DIALOG_CONTROL_ID   dialog_control_id;  /*IN*/

    S32                 enabled;            /*OUT*/
    S32                 enable_suppressed;  /*OUT*/ /* says whether enabled state is used or being suppressed from a higher level */
}
DIALOG_CMD_CTL_ENABLE_QUERY, * P_DIALOG_CMD_CTL_ENABLE_QUERY;

/*
DIALOG_CMD_CODE_CTL_ENCODE

client has changed control's data, so wants control reencoding
*/

typedef struct DIALOG_CMD_CTL_ENCODE
{
    H_DIALOG            h_dialog;           /*IN*/

    DIALOG_CONTROL_ID   dialog_control_id;  /*IN*/

    S32                 bits;               /*IN*/

#define DIALOG_ENCODE_UPDATE_NOW DIALOG_STATE_SET_UPDATE_NOW
}
DIALOG_CMD_CTL_ENCODE, * P_DIALOG_CMD_CTL_ENCODE;

/*
DIALOG_CMD_CODE_CTL_UI_CONTROL

client wants to change control's UI control or one of its data bits
*/

typedef struct DIALOG_CMD_CTL_UI_CONTROL
{
    H_DIALOG            h_dialog;           /*IN*/

    DIALOG_CONTROL_ID   dialog_control_id;  /*IN*/

    S32                 what;               /*IN*/
#define DIALOG_CMD_CTL_UI_CONTROL_UIC  0
#define DIALOG_CMD_CTL_UI_CONTROL_MAX  1
#define DIALOG_CMD_CTL_UI_CONTROL_MIN  2
#define DIALOG_CMD_CTL_UI_CONTROL_BUMP 3

    union DIALOG_CMD_CTL_UI_CONTROL_DATA
    {
        PC_UI_CONTROL_S32 p_ui_control_s32; /*IN*/
        PC_UI_CONTROL_F64 p_ui_control_f64; /*IN*/
        S32 s32; /*IN*/
        F64 f64; /*IN*/
    } data;
}
DIALOG_CMD_CTL_UI_CONTROL, * P_DIALOG_CMD_CTL_UI_CONTROL;

/*
DIALOG_CMD_CODE_CTL_SET_DEFAULT
*/

typedef struct DIALOG_CMD_CTL_SET_DEFAULT
{
    H_DIALOG            h_dialog;           /*IN*/

    DIALOG_CONTROL_ID   dialog_control_id;  /*IN*/
}
DIALOG_CMD_CTL_SET_DEFAULT, * P_DIALOG_CMD_CTL_SET_DEFAULT;

/*
DIALOG_CMD_CODE_CTL_FOCUS_SET
*/

typedef struct DIALOG_CMD_CTL_FOCUS_SET
{
    H_DIALOG            h_dialog;           /*IN*/

    DIALOG_CONTROL_ID   dialog_control_id;  /*IN*/
}
DIALOG_CMD_CTL_FOCUS_SET, * P_DIALOG_CMD_CTL_FOCUS_SET;

/*
DIALOG_CMD_CODE_CTL_FOCUS_QUERY
*/

typedef struct DIALOG_CMD_CTL_FOCUS_QUERY
{
    H_DIALOG            h_dialog;           /*IN*/

    DIALOG_CONTROL_ID   dialog_control_id;  /*OUT*/
}
DIALOG_CMD_CTL_FOCUS_QUERY, * P_DIALOG_CMD_CTL_FOCUS_QUERY;

/*
DIALOG_CMD_CODE_CTL_SIZE_ESTIMATE

ask dialog to guess suitable dimensions for this control
*/

typedef struct DIALOG_CMD_CTL_SIZE_ESTIMATE
{
    PC_DIALOG_CONTROL   p_dialog_control;
    PC_DIALOG_CONTROL_DATA p_dialog_control_data;

    /*OUT*/
    PIXIT_POINT         size;
}
DIALOG_CMD_CTL_SIZE_ESTIMATE, * P_DIALOG_CMD_CTL_SIZE_ESTIMATE;

/*
DIALOG_CMD_CODE_CTL_STATE_SET
*/

typedef union DIALOG_CTL_STATE
{
    S32                generic_s32; /* covers radiobutton,bump_s32 */
    U8                 generic_u8n; /* covers checkbox,tristate,bump_u8 */

    UI_TEXT            statictext;
    UI_TEXT            textlabel;
    UI_TEXT            textframe;
    UI_TEXT            pushbutton;

#define DIALOG_RADIOSTATE_NONE ((DIALOG_RADIOSTATE) 0x80000000)
    DIALOG_RADIOSTATE  radiobutton;
    U8                 checkbox;
    U8                 tristate;

    U8                 bump_u8;
    S32                bump_s32;
    F64                bump_f64;

    struct DIALOG_CTL_STATE_LIST_TEXT
    {
        S32 itemno;
#define DIALOG_CTL_STATE_LIST_ITEM_NONE  -1 /* none of the list is selected */
#define DIALOG_CTL_STATE_LIST_ITEM_OTHER -2 /* only really applies to combos where you can set a state that isn't represented by the list */
        UI_TEXT ui_text;
    } list_text, combo_text, edit;

    struct DIALOG_CTL_STATE_LIST_S32
    {
        S32 itemno; /* must be at same offset as list_text.itemno */
        S32 s32;
    } list_s32, combo_s32;

    union DIALOG_CONTROL_DATA_USER_STATE user;
}
DIALOG_CTL_STATE, * P_DIALOG_CTL_STATE; typedef const DIALOG_CTL_STATE * PC_DIALOG_CTL_STATE;

typedef struct DIALOG_CMD_CTL_STATE_SET
{
    H_DIALOG            h_dialog;           /*IN*/

    DIALOG_CONTROL_ID   dialog_control_id; /*IN*/

#define DIALOG_STATE_SET_UPDATE_NOW  0x08000000
#define DIALOG_STATE_SET_ALTERNATE   0x10000000
#define DIALOG_STATE_SET_ALWAYS_MSG  0x20000000
#define DIALOG_STATE_SET_DONT_MSG    0x40000000
    S32                 bits;               /*IN*/

    DIALOG_CTL_STATE    state;              /*IN*/ /* owned by caller, copied by dialog */
}
DIALOG_CMD_CTL_STATE_SET, * P_DIALOG_CMD_CTL_STATE_SET;

/*
DIALOG_CMD_CODE_CTL_STATE_QUERY
*/

typedef struct DIALOG_CMD_CTL_STATE_QUERY
{
    H_DIALOG            h_dialog;               /*IN*/

    DIALOG_CONTROL_ID   dialog_control_id;      /*IN*/

#define DIALOG_STATE_QUERY_ALTERNATE DIALOG_STATE_SET_ALTERNATE
    S32                 bits;                   /*IN*/

    DIALOG_CTL_STATE    state;                  /*OUT*/ /* copy now owned by caller */

    DIALOG_CONTROL_TYPE dialog_control_type;    /*OUT*/
}
DIALOG_CMD_CTL_STATE_QUERY, * P_DIALOG_CMD_CTL_STATE_QUERY;

/*
DIALOG_CMD_CODE_CTL_STATE_QUERY_DISPOSE
*/

/* disposes of caller owned elements of a DIALOG_CMD_CTL_STATE_QUERY */

/*
DIALOG_CMD_CODE_CTL_UPDATE_LATER

controls may want to have an area of their control redrawn sometime
*/

typedef struct DIALOG_CMD_CTL_UPDATE_LATER
{
    H_DIALOG            h_dialog;           /*IN*/

    DIALOG_CONTROL_ID   dialog_control_id;  /*IN*/

    GR_BOX              box;                /*IN*/ /* relative to control */
}
DIALOG_CMD_CTL_UPDATE_LATER, * P_DIALOG_CMD_CTL_UPDATE_LATER;

/*
DIALOG_CMD_CODE_CTL_REPOSITION

controls may want repositioning
*/

typedef struct DIALOG_CMD_CTL_REPOSITION
{
    H_DIALOG            h_dialog;           /*IN*/

    DIALOG_CONTROL_ID   dialog_control_id;  /*IN*/

    PIXIT_POINT         posn;               /*IN*/ /* new offset */
}
DIALOG_CMD_CTL_REPOSITION, * P_DIALOG_CMD_CTL_REPOSITION;

/*
DIALOG_CMD_CODE_CTL_SIZE_QUERY
*/

typedef struct DIALOG_CMD_CTL_SIZE_QUERY
{
    H_DIALOG            h_dialog;           /*IN*/

    DIALOG_CONTROL_ID   dialog_control_id;  /*IN*/

    PIXIT_POINT         outer_size;         /*OUT*/ /* current size */
    PIXIT_POINT         inner_size;         /*OUT*/ /* current size */
}
DIALOG_CMD_CTL_SIZE_QUERY, * P_DIALOG_CMD_CTL_SIZE_QUERY;

/*
DIALOG_CMD_CODE_CTL_POSN_QUERY
*/

typedef struct DIALOG_CMD_CTL_POSN_QUERY
{
    H_DIALOG            h_dialog;           /*IN*/

    DIALOG_CONTROL_ID   dialog_control_id;  /*IN*/

    PIXIT_POINT         outer_posn;         /*OUT*/ /* current posn tl */
    PIXIT_POINT         inner_posn;         /*OUT*/ /* current posn tl */
}
DIALOG_CMD_CTL_POSN_QUERY, * P_DIALOG_CMD_CTL_POSN_QUERY;

/*
DIALOG_CMD_CODE_CTL_PARENT_QUERY
*/

typedef struct DIALOG_CMD_CTL_PARENT_QUERY
{
    H_DIALOG            h_dialog;                   /*IN*/

    DIALOG_CONTROL_ID   dialog_control_id;          /*IN*/

    DIALOG_CONTROL_ID   parent_dialog_control_id;   /*OUT*/

    HOST_WND            hwnd;                       /*OUT*/
}
DIALOG_CMD_CTL_PARENT_QUERY, * P_DIALOG_CMD_CTL_PARENT_QUERY;

/*
DIALOG_CMD_CODE_CTL_PARENT_QUERY
*/

typedef struct DIALOG_CMD_HWND_QUERY
{
    H_DIALOG            h_dialog;           /*IN*/

    DIALOG_CONTROL_ID   dialog_control_id;  /*IN*/ /* 0->whole dialog */

    HOST_WND            hwnd;               /*OUT*/
}
DIALOG_CMD_HWND_QUERY, * P_DIALOG_CMD_HWND_QUERY;

/*
DIALOG_CMD_CODE_CTL_SIZE_SET

controls may want resizing
*/

typedef struct DIALOG_CMD_CTL_SIZE_SET
{
    H_DIALOG            h_dialog;           /*IN*/

    DIALOG_CONTROL_ID   dialog_control_id;  /*IN*/

    PIXIT_POINT         size;               /*IN*/ /* new size: -ve -> try to make either/both 'reasonable' for this control */
}
DIALOG_CMD_CTL_SIZE_SET, * P_DIALOG_CMD_CTL_SIZE_SET;

/*
messages from dialog to client event proc
*/

/*
all DIALOG_MSG_xxx events start like this
*/

#define DIALOG_MSG_HDR_DEF \
    H_DIALOG h_dialog;  \
    CLIENT_HANDLE client_handle;  \

#define DIALOG_MSG_CTL_HDR_DEF \
    H_DIALOG h_dialog; \
    CLIENT_HANDLE client_handle; \
    DIALOG_CONTROL_ID dialog_control_id; \
    PC_DIALOG_CONTROL p_dialog_control; \
    PC_DIALOG_CONTROL_DATA p_dialog_control_data; \

typedef struct DIALOG_MSG_HDR
{
    DIALOG_MSG_HDR_DEF
}
DIALOG_MSG_HDR, * P_DIALOG_MSG_HDR;

typedef struct DIALOG_MSG_CTL_HDR
{
    DIALOG_MSG_CTL_HDR_DEF
}
DIALOG_MSG_CTL_HDR;

/*
DIALOG_MSG_CODE_CREATE
*/

typedef struct DIALOG_MSG_CREATE
{
    DIALOG_MSG_HDR_DEF

    U32 h_client_create; /*IN*/
}
DIALOG_MSG_CREATE; typedef const DIALOG_MSG_CREATE * PC_DIALOG_MSG_CREATE;

/*
DIALOG_MSG_CODE_PROCESS_START
*/

typedef struct DIALOG_MSG_PROCESS_START
{
    DIALOG_MSG_HDR_DEF

    DIALOG_CONTROL_ID initial_focus_dialog_control_id; /*IN=0;OUT*/ /* change to other than 0 to attempt initial focus setting */
}
DIALOG_MSG_PROCESS_START, * P_DIALOG_MSG_PROCESS_START; typedef const DIALOG_MSG_PROCESS_START * PC_DIALOG_MSG_PROCESS_START;

/*
DIALOG_MSG_CODE_PROCESS_END
*/

typedef struct DIALOG_MSG_PROCESS_END
{
    DIALOG_MSG_HDR_DEF

    S32 completion_code;
}
DIALOG_MSG_PROCESS_END /*, * P_DIALOG_MSG_PROCESS_END*/; typedef const DIALOG_MSG_PROCESS_END * PC_DIALOG_MSG_PROCESS_END;

/*
DIALOG_MSG_CODE_DISPOSE
*/

/*typedef struct DIALOG_MSG_DISPOSE
{
    DIALOG_MSG_HDR_DEF
}*/
#define DIALOG_MSG_DISPOSE DIALOG_MSG_HDR

typedef DIALOG_MSG_DISPOSE * P_DIALOG_MSG_DISPOSE;

/*
DIALOG_MSG_CODE_PERSISTING
*/

/*typedef struct DIALOG_MSG_PERSISTING
{
    DIALOG_MSG_HDR_DEF
}*/
#define DIALOG_MSG_PERSISTING DIALOG_MSG_HDR

typedef DIALOG_MSG_PERSISTING * P_DIALOG_MSG_PERSISTING;

/*
DIALOG_MSG_CODE_PREPROCESS_COMMAND
*/

typedef struct DIALOG_MSG_PREPROCESS_COMMAND
{
    DIALOG_MSG_CTL_HDR_DEF /* client may need the control data so supply it in a consistent manner */

    ARGLIST_HANDLE arglist_handle; /*INOUT*/
}
DIALOG_MSG_PREPROCESS_COMMAND, * P_DIALOG_MSG_PREPROCESS_COMMAND;

/*
DIALOG_MSG_CODE_COMPLETE_DBOX
*/

typedef struct DIALOG_MSG_COMPLETE_DBOX
{
    DIALOG_MSG_HDR_DEF

    S32 completion_code;
}
DIALOG_MSG_COMPLETE_DBOX, * P_DIALOG_MSG_COMPLETE_DBOX;

/*
DIALOG_MSG_CODE_CURRENT
*/

/*typedef struct DIALOG_MSG_CURRENT
{
    DIALOG_MSG_HDR_DEF
}*/
#define DIALOG_MSG_CURRENT DIALOG_MSG_HDR

typedef DIALOG_MSG_CURRENT * P_DIALOG_MSG_CURRENT;

/*
DIALOG_MSG_CODE_RESIZE
*/

typedef struct DIALOG_MSG_RESIZE
{
    DIALOG_MSG_HDR_DEF

    PIXIT_POINT size; /* new size */
}
DIALOG_MSG_RESIZE, * P_DIALOG_MSG_RESIZE;

/*
DIALOG_MSG_CODE_DBOX_DESTROY
*/

/*typedef struct DIALOG_MSG_DBOX_DESTROY
{
    DIALOG_MSG_HDR_DEF
}*/
#define DIALOG_MSG_DBOX_DESTROY DIALOG_MSG_HDR

typedef DIALOG_MSG_DBOX_DESTROY * P_DIALOG_MSG_DBOX_DESTROY;

/*
DIALOG_MSG_CODE_CTL_CREATE
*/

/*typedef struct DIALOG_MSG_CTL_CREATE
{
    DIALOG_MSG_CTL_HDR_DEF
}*/
#define DIALOG_MSG_CTL_CREATE DIALOG_MSG_CTL_HDR

typedef DIALOG_MSG_CTL_CREATE * P_DIALOG_MSG_CTL_CREATE;

/*
DIALOG_MSG_CODE_CTL_FILL_LIST
*/

typedef struct DIALOG_MSG_CTL_FILL_SOURCE
{
    DIALOG_MSG_CTL_HDR_DEF

    PC_UI_SOURCE p_ui_source; /*OUT*/

    PC_UI_CONTROL_S32 p_ui_control_s32; /*inout, iff _S32 type*/
}
DIALOG_MSG_CTL_FILL_SOURCE, * P_DIALOG_MSG_CTL_FILL_SOURCE;

/*
DIALOG_MSG_CODE_CTL_CREATE_STATE
*/

typedef struct DIALOG_MSG_CTL_CREATE_STATE
{
    DIALOG_MSG_CTL_HDR_DEF

    DIALOG_CMD_CTL_STATE_SET state_set; /*INOUT*/

    BOOL processed; /*OUT*/
}
DIALOG_MSG_CTL_CREATE_STATE, * P_DIALOG_MSG_CTL_CREATE_STATE;

/*
DIALOG_MSG_CODE_CTL_CURRENT
*/

/*typedef struct DIALOG_MSG_CTL_CURRENT
{
    DIALOG_MSG_CTL_HDR_DEF
}*/
#define DIALOG_MSG_CTL_CURRENT DIALOG_MSG_CTL_HDR

typedef DIALOG_MSG_CTL_CURRENT * P_DIALOG_MSG_CTL_CURRENT;

/*
DIALOG_MSG_CODE_CTL_DISPOSE
*/

/*typedef struct DIALOG_MSG_CTL_DISPOSE
{
    DIALOG_MSG_CTL_HDR_DEF
}*/
#define DIALOG_MSG_CTL_DISPOSE DIALOG_MSG_CTL_HDR

typedef DIALOG_MSG_CTL_DISPOSE * P_DIALOG_MSG_CTL_DISPOSE;

/*
DIALOG_MSG_CODE_CTL_REPOSITION
*/

/*typedef struct DIALOG_MSG_CTL_REPOSITION
{
    DIALOG_MSG_CTL_HDR_DEF
}*/
#define DIALOG_MSG_CTL_REPOSITION DIALOG_MSG_CTL_HDR

typedef DIALOG_MSG_CTL_REPOSITION * P_DIALOG_MSG_CTL_REPOSITION;

/*
DIALOG_MSG_CODE_CTL_RESIZE
*/

typedef struct DIALOG_MSG_CTL_RESIZE
{
    DIALOG_MSG_CTL_HDR_DEF

    PIXIT_POINT size; /* new size */
}
DIALOG_MSG_CTL_RESIZE, * P_DIALOG_MSG_CTL_RESIZE;

/*
DIALOG_MSG_CODE_CTL_PUSHBUTTON
*/

typedef struct DIALOG_MSG_CTL_PUSHBUTTON
{
    DIALOG_MSG_CTL_HDR_DEF

    BOOL processed;        /*IN=0;OUT*/
    S32  completion_code;  /*IN=0;OUT iff processed*/
    BOOL right_button;
    DIALOG_CONTROL_ID double_dialog_control_id; /* !=0 if caused by double-clicking on a control */
}
DIALOG_MSG_CTL_PUSHBUTTON, * P_DIALOG_MSG_CTL_PUSHBUTTON;

/*
DIALOG_MSG_CODE_CTL_KEY
*/

typedef struct DIALOG_MSG_CTL_KEY
{
    DIALOG_MSG_CTL_HDR_DEF

    STATUS processed;        /*IN=0;OUT*/

    S32    key_code;         /*IN*/
}
DIALOG_MSG_CTL_KEY, * P_DIALOG_MSG_CTL_KEY;

/*
DIALOG_MSG_CODE_CTL_USER_REDRAW
*/

/* host specific structure */

typedef struct DIALOG_MSG_CTL_USER_REDRAW DIALOG_MSG_CTL_USER_REDRAW; typedef const DIALOG_MSG_CTL_USER_REDRAW * PC_DIALOG_MSG_CTL_USER_REDRAW;

/*
DIALOG_MSG_CODE_CTL_USER_MOUSE
*/

typedef enum DIALOG_MSG_CTL_USER_MOUSE_CLICK
{
    DIALOG_MSG_USER_MOUSE_CLICK_LEFT_SINGLE = 0,
    DIALOG_MSG_USER_MOUSE_CLICK_LEFT_DRAG,
    DIALOG_MSG_USER_MOUSE_CLICK_LEFT_DOUBLE,
    DIALOG_MSG_USER_MOUSE_CLICK_RIGHT_SINGLE,
    DIALOG_MSG_USER_MOUSE_CLICK_RIGHT_DRAG,
    DIALOG_MSG_USER_MOUSE_CLICK_RIGHT_DOUBLE
}
DIALOG_MSG_CTL_USER_MOUSE_CLICK;

typedef struct DIALOG_MSG_CTL_USER_MOUSE DIALOG_MSG_CTL_USER_MOUSE; typedef const DIALOG_MSG_CTL_USER_MOUSE * PC_DIALOG_MSG_CTL_USER_MOUSE;

typedef struct DIALOG_MSG_CTL_USER_POINTER_QUERY DIALOG_MSG_CTL_USER_POINTER_QUERY; typedef DIALOG_MSG_CTL_USER_POINTER_QUERY * P_DIALOG_MSG_CTL_USER_POINTER_QUERY;

/*
DIALOG_MSG_CODE_CTL_STATE_CHANGE
*/

typedef struct DIALOG_MSG_CTL_STATE_CHANGE
{
    DIALOG_MSG_CTL_HDR_DEF

    DIALOG_CTL_STATE new_state; /*IN*/ /*NB. this is just a replica of state owned by dialog */
}
DIALOG_MSG_CTL_STATE_CHANGE; typedef const DIALOG_MSG_CTL_STATE_CHANGE * PC_DIALOG_MSG_CTL_STATE_CHANGE;

#if RISCOS

/* all are host specific - see xp_dlgr.h */

#endif /* RISCOS */

#if WINDOWS

/*
DIALOG_MSG_CODE_CTL_USER_MOUSE
*/

struct DIALOG_MSG_CTL_USER_MOUSE
{
    DIALOG_MSG_CTL_HDR_DEF

    DIALOG_MSG_CTL_USER_MOUSE_CLICK click; /*IN*/
};

/*
DIALOG_MSG_CODE_CTL_USER_POINTER_QUERY
*/

struct DIALOG_MSG_CTL_USER_POINTER_QUERY
{
    DIALOG_MSG_CTL_HDR_DEF

    POINTER_SHAPE pointer_shape; /*IN=0;OUT*/
};

/*
DIALOG_MSG_CODE_CTL_USER_REDRAW
*/

struct DIALOG_MSG_CTL_USER_REDRAW
{
    DIALOG_MSG_CTL_HDR_DEF

    REDRAW_CONTEXT redraw_context;    /*IN*/
    PIXIT_RECT     control_outer_box; /*IN*/
    PIXIT_RECT     control_inner_box; /*IN*/

    S32 enabled; /*IN*/
};

#endif /* WINDOWS */

#endif /* __xp_dlg_h */

/* end of xp_dlg.h */
